"""Add Campaign model and update Persona with campaign_id

Revision ID: d73591bf8ce5
Revises: 288ee1b79026
Create Date: 2025-07-30 19:44:27.219949

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd73591bf8ce5'
down_revision: Union[str, Sequence[str], None] = '288ee1b79026'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    from datetime import datetime
    
    # Create campaigns table
    op.create_table('campaigns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    
    # Create a default campaign for existing personas
    connection = op.get_bind()
    now = datetime.utcnow()
    
    # Insert default campaign
    connection.execute(
        sa.text("INSERT INTO campaigns (name, description, created_at, updated_at) VALUES ('Default Campaign', 'Default campaign for existing personas', :created_at, :updated_at)"),
        {'created_at': now, 'updated_at': now}
    )
    
    # Get the default campaign ID
    result = connection.execute(sa.text("SELECT id FROM campaigns WHERE name = 'Default Campaign'"))
    default_campaign_id = result.fetchone()[0]
    
    # Add campaign_id column as nullable first
    op.add_column('personas', sa.Column('campaign_id', sa.Integer(), nullable=True))
    
    # Update existing personas to use the default campaign
    connection.execute(
        sa.text("UPDATE personas SET campaign_id = :campaign_id"),
        {'campaign_id': default_campaign_id}
    )
    
    # Make campaign_id non-nullable
    op.alter_column('personas', 'campaign_id', nullable=False)
    
    # Add foreign key constraint
    op.create_foreign_key(None, 'personas', 'campaigns', ['campaign_id'], ['id'])


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'personas', type_='foreignkey')
    op.drop_column('personas', 'campaign_id')
    op.drop_table('campaigns')
    # ### end Alembic commands ###
